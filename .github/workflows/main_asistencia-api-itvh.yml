name: Build and deploy PHP app to Azure Web App - asistencia-api-itvh

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: intl, gd, zip, pdo_mysql
          
      - name: Check composer.json
        id: check_files
        run: |
          if [ -f "composer.json" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Fix Composer dependencies and lock file
        if: steps.check_files.outputs.exists == 'true'
        run: |
          echo "Current composer.json contents:"
          cat composer.json
          
          # Eliminar completamente el archivo lock para forzar regeneración
          if [ -f "composer.lock" ]; then
            rm composer.lock
            echo "Removed composer.lock to force regeneration"
          fi
          
          # Usar composer require con una versión específica compatible con Yii2 2.0.x
          echo "Adding yiisoft/yii2-debug with version constraint compatible with Yii 2.0.x"
          composer require yiisoft/yii2-debug "~2.1.0" --no-update
          
          # Verificar si hay paquetes en require-dev que deberían estar en require
          php -r '
            $composer = json_decode(file_get_contents("composer.json"), true);
            if (isset($composer["require-dev"])) {
              foreach (["yiisoft/yii2-gii"] as $package) {
                if (isset($composer["require-dev"][$package]) && !isset($composer["require"][$package])) {
                  echo "Moving $package from require-dev to require\n";
                  $composer["require"][$package] = $composer["require-dev"][$package];
                  unset($composer["require-dev"][$package]);
                }
              }
              file_put_contents("composer.json", json_encode($composer, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES));
            }
          '
          
          echo "Updated composer.json contents:"
          cat composer.json
          
      - name: Update composer dependencies
        if: steps.check_files.outputs.exists == 'true'
        run: |
          # Actualizar todas las dependencias y regenerar el archivo lock
          composer update --no-dev --prefer-dist

      - name: Generate Yii2 cookie validation key
        run: |
          if [ -f "config/web.php" ]; then
            php -r "
              \$config = file_get_contents('config/web.php');
              if (strpos(\$config, \"'cookieValidationKey' => ''\") !== false) {
                \$key = bin2hex(random_bytes(32));
                \$config = str_replace(\"'cookieValidationKey' => ''\", \"'cookieValidationKey' => '\$key'\", \$config);
                file_put_contents('config/web.php', \$config);
                echo \"Generated cookie validation key: \$key\n\";
              } else {
                echo \"Cookie validation key already exists\n\";
              }
            "
          fi

      - name: Set production environment
        run: |
          if [ -f "web/index.php" ]; then
            echo "<?php 
            defined('YII_DEBUG') or define('YII_DEBUG', false);
            defined('YII_ENV') or define('YII_ENV', 'prod');
            " > web/index.php.new
            
            cat web/index.php | grep -v "YII_DEBUG\|YII_ENV" >> web/index.php.new
            mv web/index.php.new web/index.php
            echo "Set YII_ENV to 'prod' and YII_DEBUG to false"
          fi

      - name: Configure production modules
        run: |
          if [ -f "config/web.php" ]; then
            php -r "
              \$config = file_get_contents('config/web.php');
              
              // Asegurar que el bootstrap sea solo 'log'
              \$config = preg_replace(\"/'bootstrap' => \[[^\]]*\]/\", \"'bootstrap' => ['log']\", \$config);
              
              // Eliminar los módulos debug y gii si existen
              if (strpos(\$config, \"'modules' => [\") !== false) {
                \$config = preg_replace(\"/('debug' => \[([^]]*)\],?)/s\", \"\", \$config);
                \$config = preg_replace(\"/('gii' => \[([^]]*)\],?)/s\", \"\", \$config);
              }
              
              file_put_contents('config/web.php', \$config);
              echo \"Removed debug and gii modules from configuration\n\";
            "
          fi

      - name: Configure Nginx for Yii2
        run: |
          mkdir -p .nginx/conf.d
          cat << EOF > .nginx/conf.d/default.conf
          server {
              listen 8080;
              server_name localhost;
              root /home/site/wwwroot/web;
              index index.php;

              location / {
                  try_files \$uri \$uri/ /index.php?\$args;
              }

              location ~ \.php$ {
                  fastcgi_pass 127.0.0.1:9000;
                  fastcgi_index index.php;
                  include fastcgi_params;
                  fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
                  fastcgi_param PATH_INFO \$fastcgi_path_info;
                  fastcgi_split_path_info ^(.+\.php)(/.+)$;
              }

              location ~ /\.(ht|svn|git) {
                  deny all;
              }
          }
          EOF

      - name: Create .htaccess
        run: |
          if [ ! -f "web/.htaccess" ]; then
            cat << EOF > web/.htaccess
            RewriteEngine on
            
            # Si el directorio o archivo no existe, continuar con la siguiente regla
            RewriteCond %{REQUEST_FILENAME} !-f
            RewriteCond %{REQUEST_FILENAME} !-d
            
            # En caso contrario, redireccionar a index.php
            RewriteRule . index.php
            EOF
            echo "Created .htaccess file for Apache"
          fi

      - name: Set permissions
        run: |
          mkdir -p runtime web/assets
          chmod -R 777 runtime web/assets
          if [ -f "yii" ]; then
            chmod 755 yii
          fi

      - name: Zip artifact for deployment
        run: zip -r release.zip . .nginx/conf.d/default.conf

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: php-app
          path: release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: php-app

      - name: Unzip artifact
        run: unzip release.zip

      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          auth-type: "SERVICE_PRINCIPAL"
    
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        id: deploy-to-webapp
        with:
          app-name: 'asistencia-api-itvh'
          slot-name: 'Production'
          package: .
