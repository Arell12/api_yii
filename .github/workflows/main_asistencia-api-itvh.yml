name: Deploy Yii2 to Azure App Service

on:
  push:
    branches: [ main ]

env:
  AZURE_WEBAPP_NAME: asistencia-api-itvh
  RESOURCE_GROUP: asistencia-app
  PHP_VERSION: '8.2'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: intl, gd, pdo_mysql, zip
        tools: composer

    - name: Install dependencies
      run: |
        composer install --prefer-dist --no-dev --optimize-autoloader
        composer dump-autoload --optimize

    - name: Configure Yii2 for production
      run: |
        # Configuración de producción en index.php
        cat << 'EOF' > web/index.php
        <?php
        defined('YII_DEBUG') or define('YII_DEBUG', false);
        defined('YII_ENV') or define('YII_ENV', 'prod');
        
        require __DIR__ . '/../vendor/autoload.php';
        require __DIR__ . '/../vendor/yiisoft/yii2/Yii.php';
        
        // Configurar directorios de assets y runtime en ubicación con permisos de escritura
        Yii::setAlias('@runtime', '/tmp/yii2-runtime');
        Yii::setAlias('@webroot', __DIR__);
        Yii::setAlias('@web', '');
        
        $config = require __DIR__ . '/../config/web.php';
        
        // Modificar configuración para usar directorios temporales con permisos de escritura
        if (!isset($config['components']['assetManager'])) {
            $config['components']['assetManager'] = [];
        }
        $config['components']['assetManager']['basePath'] = '/tmp/yii2-assets';
        $config['components']['assetManager']['baseUrl'] = '/assets';
        
        // Asegurar que el directorio runtime esté configurado para usar /tmp
        if (!isset($config['components']['log'])) {
            $config['components']['log'] = [];
        }
        if (!isset($config['components']['log']['targets'])) {
            $config['components']['log']['targets'] = [];
        }
        foreach ($config['components']['log']['targets'] as &$target) {
            if (isset($target['logFile'])) {
                $target['logFile'] = str_replace('@runtime', '/tmp/yii2-runtime', $target['logFile']);
            }
        }
        
        (new yii\web\Application($config))->run();
        EOF

        # Asegurar que las configuraciones sean compatibles con un sistema de archivos de sólo lectura
        # (usaremos /tmp para los directorios que necesitan escritura)
        mkdir -p web/assets runtime

    # Modificar el startup script para trabajar con sistema de archivos de solo lectura
    - name: Create optimized startup script
      run: |
        cat << 'EOF' > startup.sh
        #!/bin/bash

        # =============================================
        # CONFIGURACIÓN OPTIMIZADA PARA AZURE
        # =============================================

        # Detener cualquier servicio existente
        echo "Deteniendo servicios existentes..."
        pkill -f nginx || true
        pkill -f php-fpm || true

        # Crear directorios temporales con permisos de escritura
        echo "Creando directorios temporales para Yii2..."
        mkdir -p /tmp/yii2-assets
        mkdir -p /tmp/yii2-runtime
        chmod -R 777 /tmp/yii2-assets
        chmod -R 777 /tmp/yii2-runtime

        # 1. Configurar PHP-FPM
        echo "Configurando PHP-FPM..."
        cat > /usr/local/etc/php-fpm.d/zz-azure.conf << 'EOL'
        [www]
        user = www-data
        group = www-data
        listen = /tmp/php-fpm.sock
        listen.owner = www-data
        listen.group = www-data
        listen.mode = 0660
        pm = dynamic
        pm.max_children = 10
        pm.start_servers = 2
        pm.min_spare_servers = 1
        pm.max_spare_servers = 3
        request_terminate_timeout = 300
        EOL

        # 2. Configurar Nginx correctamente para Yii2
        echo "Configurando Nginx..."
        cat > /etc/nginx/sites-available/default << 'EOL'
        server {
            listen 8080;
            server_name localhost;
            root /home/site/wwwroot/web;
            index index.php;
            client_max_body_size 32m;
            
            # Aumentar timeouts
            proxy_connect_timeout 300s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
            fastcgi_send_timeout 300s;
            fastcgi_read_timeout 300s;

            # Configuración de seguridad
            add_header X-Frame-Options "SAMEORIGIN";
            add_header X-XSS-Protection "1; mode=block";
            add_header X-Content-Type-Options "nosniff";

            # Ruta para los assets en directorio temporal
            location /assets {
                alias /tmp/yii2-assets;
                try_files $uri =404;
            }

            location / {
                try_files $uri $uri/ /index.php$is_args$args;
            }

            location ~ \.php$ {
                include fastcgi_params;
                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                fastcgi_pass unix:/tmp/php-fpm.sock;
                fastcgi_index index.php;
                fastcgi_buffers 16 16k;
                fastcgi_buffer_size 32k;
                fastcgi_read_timeout 300;
            }

            location ~ /\.(ht|svn|git) {
                deny all;
            }
        }
        EOL

        # 3. Iniciar servicios
        echo "Iniciando PHP-FPM..."
        php-fpm

        echo "Iniciando Nginx..."
        nginx -g "daemon off;"
        EOF

        chmod +x startup.sh

    - name: Zip artifact
      run: zip -r release.zip . -x '*.git*'

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Configure Azure App Service
      uses: azure/cli@v1
      with:
        inlineScript: |
          # Configurar la aplicación web
          az webapp config set \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --linux-fx-version "PHP|${{ env.PHP_VERSION }}" \
            --startup-file "/home/site/wwwroot/startup.sh"
            
          # Habilitar logs y configuraciones adicionales
          az webapp log config \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --web-server-logging filesystem \
            --detailed-error-messages true \
            --failed-request-tracing true

          # Deshabilitar cualquier servicio predeterminado que pueda estar ocupando el puerto
          az webapp config appsettings set \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --settings \
              WEBSITES_ENABLE_APP_SERVICE_STORAGE=true \
              WEBSITES_PORT=8080 \
              PHP_FPM_MAX_CHILDREN=10 \
              PHP_FPM_START_SERVERS=2 \
              PHP_FPM_MIN_SPARE_SERVERS=1 \
              PHP_FPM_MAX_SPARE_SERVERS=3 \
              YII_ENV=prod \
              SCM_DO_BUILD_DURING_DEPLOYMENT=true \
              WEBSITES_CONTAINER_START_TIME_LIMIT=600 \
              SCM_COMMAND_IDLE_TIMEOUT=600 \
              WEBSITE_HTTPLOGGING_RETENTION_DAYS=1

    - name: Deploy to Azure
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        package: release.zip
