# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions
name: Build and deploy PHP app to Azure Web App - asistencia-api-itvh

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: intl, gd, zip, pdo_mysql
          
      - name: Check composer.json
        id: check_files
        run: |
          if [ -f "composer.json" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Run composer install
        if: steps.check_files.outputs.exists == 'true'
        run: |
          composer validate --no-check-publish
          composer install --prefer-dist --no-progress --no-dev --optimize-autoloader

      - name: Generate Yii2 cookie validation key
        run: |
          if [ -f "config/web.php" ]; then
            php -r "
              \$config = file_get_contents('config/web.php');
              if (strpos(\$config, \"'cookieValidationKey' => ''\") !== false) {
                \$config = str_replace(\"'cookieValidationKey' => ''\", \"'cookieValidationKey' => '\".bin2hex(random_bytes(32)).\"'\", \$config);
                file_put_contents('config/web.php', \$config);
              }
            "
          fi

      - name: Create Azure Storage Compatibility Script
        run: |
          cat << EOF > config/azure-storage.php
          <?php
          // Azure App Service compatible storage path configuration
          defined('STORAGE_DIR') or define('STORAGE_DIR', '/home/storage');
          
          // Define global variables for asset manager
          \$GLOBALS['yii2AzureStorage'] = [
              'runtimePath' => STORAGE_DIR . '/runtime',
              'assetsPath' => STORAGE_DIR . '/assets',
          ];
          
          // Define path alias for storage
          Yii::\$container->set('path', [
              '@runtime' => STORAGE_DIR . '/runtime',
              '@webroot/assets' => STORAGE_DIR . '/assets',
          ]);
          
          // Create directories if they don't exist
          if (!file_exists(STORAGE_DIR . '/runtime')) {
              @mkdir(STORAGE_DIR . '/runtime', 0777, true);
          }
          if (!file_exists(STORAGE_DIR . '/assets')) {
              @mkdir(STORAGE_DIR . '/assets', 0777, true);
          }
          EOF

      - name: Update index.php for Azure compatibility
        run: |
          if [ -f "web/index.php" ]; then
            sed -i '/require __DIR__/i // Azure storage configuration\nrequire __DIR__ . "/../config/azure-storage.php";' web/index.php
          fi

      - name: Configure Nginx for Yii2
        run: |
          mkdir -p .nginx/conf.d
          cat << EOF > .nginx/conf.d/default.conf
          server {
              listen 8080;
              server_name localhost;
              root /home/site/wwwroot/web;
              index index.php;

              location / {
                  try_files \$uri \$uri/ /index.php?\$args;
              }

              location ~ \.php$ {
                  fastcgi_pass 127.0.0.1:8181; 
                  fastcgi_index index.php;
                  include fastcgi_params;
                  fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
              }

              location ~ /\.ht {
                  deny all;
              }
          }
          EOF

      - name: Create enhanced startup script
        run: |
          cat << EOF > startup.sh
          #!/bin/bash
          # Script de inicio para Azure App Service
          # Este script se ejecuta cada vez que se inicia la aplicación
          echo "Iniciando script de configuración para Yii2 en Azure App Service..."

          # Crear directorios de almacenamiento persistente
          echo "Creando directorios de almacenamiento persistente..."
          mkdir -p /home/storage/runtime /home/storage/assets
          chmod -R 777 /home/storage/runtime /home/storage/assets

          # Verificar si existen los directorios
          if [ -d "/home/storage/runtime" ] && [ -d "/home/storage/assets" ]; then
            echo "Directorios de almacenamiento creados correctamente."
          else
            echo "ERROR: No se pudieron crear los directorios de almacenamiento."
          fi

          # Configurar PHP-FPM para escuchar en el puerto 8181
          echo "Configurando PHP-FPM para escuchar en el puerto 8181..."
          mkdir -p /usr/local/etc/php-fpm.d
          echo "[www]" > /usr/local/etc/php-fpm.d/z-custom.conf
          echo "listen = 127.0.0.1:8181" >> /usr/local/etc/php-fpm.d/z-custom.conf
          echo "Configuración de PHP-FPM actualizada."

          # Aplicar configuración de Nginx si existe
          if [ -f /home/site/wwwroot/.nginx/conf.d/default.conf ]; then
            echo "Aplicando configuración de Nginx..."
            cp /home/site/wwwroot/.nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf
            service nginx restart
            if [ \$? -eq 0 ]; then
              echo "Nginx reiniciado correctamente."
            else
              echo "ERROR: No se pudo reiniciar Nginx."
            fi
          else
            echo "ADVERTENCIA: No se encontró el archivo de configuración de Nginx."
          fi

          # Log para verificar el directorio de la aplicación
          echo "Contenido del directorio de la aplicación:"
          ls -la /home/site/wwwroot

          # Iniciar PHP-FPM
          echo "Iniciando PHP-FPM..."
          php-fpm --nodaemonize --fpm-config /usr/local/etc/php-fpm.conf
          EOF
          chmod +x startup.sh

      - name: Zip artifact for deployment
        run: zip -r release.zip .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: php-app
          path: release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: php-app

      - name: Unzip artifact
        run: unzip release.zip

      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          auth-type: "SERVICE_PRINCIPAL"
    
      - name: Configure Azure App Service settings
        uses: azure/cli@v2
        with:
          inlineScript: |
            # Definir el Resource Group correctamente
            RESOURCE_GROUP="asistencia-app"
      
            # Log para confirmar
            echo "✅ Resource Group encontrado: $RESOURCE_GROUP"
      
            # Configurar el comando de inicio en Azure
            az webapp config set --name asistencia-api-itvh --resource-group $RESOURCE_GROUP --startup-file /home/site/wwwroot/startup.sh

      
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        id: deploy-to-webapp
        with:
          app-name: 'asistencia-api-itvh'
          slot-name: 'Production'
          package: .
